// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RayMarch

static const float PI = 3.141592653589793;
static const float FAR_PLANE = 1000;

static const float3 LIGHT_DIRECTION = normalize(float3(1, -1, 1));
static const float3 LIGHT_COLOR = float3(1, 1, 1);

struct ShapeStruct
{
	float4x4 translateRotateMat;
	float4x4 translateRotateMatInv;
	float3 size;
	float4 color;
	uint id;
	uint alterId;
	bool reflective;
};

struct CameraStruct
{
	float3 position;
	float3 right;
	float3 up;
	float3 forward;
};

struct MarchResult
{
	int steps;
	float distance;
	int hitIndex;
	float3 position;
};

RWTexture2D<float4> outTexture;

uint2 screenSize;
float tangent;
float aspect;
float epsilon;
float delta;
float fogDistance;
float3 fogColor;
int maxSteps;
int maxBounces;

StructuredBuffer<ShapeStruct> shapes;
StructuredBuffer<CameraStruct> camera;
uint shapeCount;

float3 alteration(ShapeStruct shapeBuffer, float3 pos)
{
	if (shapeBuffer.alterId == 0)
	{
		return pos;
	}
	else if (shapeBuffer.alterId == 1)
	{
		return frac(pos/4+0.5)*4-2;
	}
	else
	{
		return pos;
	}
}

float sphereDE(float3 currPos)
{
	return length(currPos) - 1;
}

float cubeDE(float3 currPos, float3 size)
{
	float3 d = abs(currPos) - size;
	return length(max(d, 0)) + min(max(d.x, max(d.y, d.z)), 0);
}

float tetrahedronDE(float3 currPos)
{
	return 1;
}

float planeDE(float3 currPos, float3 normal)
{
	return dot(currPos, normal);
}

float distanceEstimator(ShapeStruct shapeBuffer, float3 currPos)
{
	currPos = mul(shapeBuffer.translateRotateMatInv, float4(currPos, 1)).xyz;
	if (shapeBuffer.id == 0)
	{
		return sphereDE(alteration(shapeBuffer, currPos/shapeBuffer.size.x))*shapeBuffer.size.x;
	}
	else if (shapeBuffer.id == 1)
	{
		return cubeDE(alteration(shapeBuffer, currPos), shapeBuffer.size);
	}
	else if (shapeBuffer.id == 2)
	{
		return tetrahedronDE(alteration(shapeBuffer, currPos/shapeBuffer.size.x))*shapeBuffer.size.x;
	}
	else if (shapeBuffer.id == 3)
	{
		float3 normal = mul(shapeBuffer.translateRotateMat, float4(0, 1, 0, 0)).xyz;
		return planeDE(alteration(shapeBuffer, currPos), normal);
	}
	else
	{
		return sphereDE(alteration(shapeBuffer, currPos/shapeBuffer.size.x))*shapeBuffer.size.x;
	}
}

float3 calculateNormal(float3 currPos)
{
	float pdx = 1000000;
	float ndx = 1000000;
	float pdy = 1000000;
	float ndy = 1000000;
	float pdz = 1000000;
	float ndz = 1000000;
	for (uint i = 0; i < shapeCount; i++)
	{
		pdx = min(pdx, distanceEstimator(shapes[i], currPos + float3(delta, 0, 0)));
		ndx = min(ndx, distanceEstimator(shapes[i], currPos - float3(delta, 0, 0)));
		pdy = min(pdy, distanceEstimator(shapes[i], currPos + float3(0, delta, 0)));
		ndy = min(ndy, distanceEstimator(shapes[i], currPos - float3(0, delta, 0)));
		pdz = min(pdz, distanceEstimator(shapes[i], currPos + float3(0, 0, delta)));
		ndz = min(ndz, distanceEstimator(shapes[i], currPos - float3(0, 0, delta)));
	}
	return normalize(float3(pdx - ndx, pdy - ndy, pdz - ndz));
}

float4 calculateColor(float3 currPos, float4 baseColor)
{
	float3 viewDir = normalize(camera[0].position - currPos);
	float3 normal = calculateNormal(currPos);
	float3 halfway = normalize(-LIGHT_DIRECTION + viewDir);

	// Ambient
	float3 ambient = 0.5 * baseColor.rgb;

	// Diffuse
	float3 diffuse = saturate(0.8 * dot(normal, -LIGHT_DIRECTION)) * baseColor.rgb;

	// Specular
	float3 specular = 0.6 * pow(abs(dot(normal, halfway)), 30) * LIGHT_COLOR;

	return float4(ambient + diffuse + specular, 1);
}

MarchResult march(float3 startPos, float3 direction)
{
	float3 currPos = startPos;
	float totalDist = 0;
	int s;
	int hitIndex = -1;

	for (s = 0; s < maxSteps; s++)
	{
		// Find smallest distance
		float minDist = 1000000000;
		hitIndex = -1;
		for (uint i = 0; i < shapeCount; i++)
		{
			float dist = distanceEstimator(shapes[i], currPos);
			if (dist < minDist)
			{
				minDist = dist;
				hitIndex = i;
			}
		}

		// Move forward
		currPos += minDist * direction;
		totalDist += minDist;

		// Check if hit object
		if (minDist <= epsilon)
		{
			break;
		}
	}

	// Return the result
	MarchResult result;
	result.steps = s;
	result.distance = totalDist;
	result.hitIndex = hitIndex;
	result.position = currPos;
	return result;
}

[numthreads(32,16,1)]
void RayMarch(uint3 id : SV_DispatchThreadID)
{
	// Calculate viewport position
	float2 viewportPos = id.xy / (screenSize-1.0) * 2 - 1;
	viewportPos.x *= aspect;
	viewportPos *= tangent;

	// Create the ray
	float3 direction = float3(0, 0, 0);
	direction += camera[0].right * viewportPos.x;
	direction += camera[0].up * viewportPos.y;
	direction += camera[0].forward;
	direction = normalize(direction);

	MarchResult objResult = march(camera[0].position, direction);

	// Initial color
	float4 finalColor = float4(fogColor, 1);

	if (objResult.distance <= FAR_PLANE)
	{
		// Check for reflective object
		if (objResult.hitIndex != -1 && shapes[objResult.hitIndex].reflective)
		{
			MarchResult reflectResult = objResult;
			int numBounces = 0;
			float3 bounceDirection = direction;
			float totalDist = 0;
			do
			{
				float3 normal = calculateNormal(reflectResult.position);
				bounceDirection -= dot(bounceDirection, normal) * normal * 2;
				reflectResult = march(reflectResult.position + epsilon * 10 * bounceDirection, bounceDirection);
				totalDist += reflectResult.distance;
				// objResult.distance += reflectResult.distance;
				numBounces++;
			} while (reflectResult.hitIndex != -1 && shapes[reflectResult.hitIndex].reflective && numBounces < maxBounces);

			// Blinn-Phong lighting
			if (reflectResult.hitIndex != -1 && reflectResult.distance <= FAR_PLANE)
			{
				finalColor = calculateColor(reflectResult.position, shapes[reflectResult.hitIndex].color);
			}

			// Add fog
			float fogFactor = saturate(totalDist / fogDistance);
			finalColor = fogFactor * float4(fogColor, 1) + (1 - fogFactor) * finalColor;

			// Add tint
			finalColor = lerp(finalColor, finalColor * shapes[objResult.hitIndex].color, 0.8);
		}
		// Otherwise non-reflective object
		else
		{
			// Blinn-Phong lighting
			if (objResult.hitIndex != -1)
			{
				finalColor = calculateColor(objResult.position, shapes[objResult.hitIndex].color);
			}

			// Grayscale lighting
			// float grayscale = 1 - float(s)/float(maxSteps);
			// finalColor = float4(grayscale, grayscale, grayscale, 1);
		}

		// Add shadows
		MarchResult shadowResult = march(objResult.position - FAR_PLANE/2 * LIGHT_DIRECTION, LIGHT_DIRECTION);
		if (shadowResult.distance <= FAR_PLANE && objResult.hitIndex != shadowResult.hitIndex)
		{
			finalColor *= 0.4;
		}

		// Add fog
		float fogFactor = saturate(objResult.distance / fogDistance);
		finalColor = fogFactor * float4(fogColor, 1) + (1 - fogFactor) * finalColor;
	}

	outTexture[id.xy] = finalColor;
}
